//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UICenterOnChildWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UICenterOnChild), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Recenter", Recenter);
		L.RegFunction("CenterOn", CenterOn);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("springStrength", get_springStrength, set_springStrength);
		L.RegVar("nextPageThreshold", get_nextPageThreshold, set_nextPageThreshold);
		L.RegVar("onFinished", get_onFinished, set_onFinished);
		L.RegVar("onCenter", get_onCenter, set_onCenter);
		L.RegVar("centeredObject", get_centeredObject, null);
		L.RegFunction("OnCenterCallback", UICenterOnChild_OnCenterCallback);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Recenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UICenterOnChild obj = (UICenterOnChild)ToLua.CheckObject<UICenterOnChild>(L, 1);
			obj.Recenter();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CenterOn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UICenterOnChild obj = (UICenterOnChild)ToLua.CheckObject<UICenterOnChild>(L, 1);
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.CenterOn(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_springStrength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICenterOnChild obj = (UICenterOnChild)o;
			float ret = obj.springStrength;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index springStrength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nextPageThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICenterOnChild obj = (UICenterOnChild)o;
			float ret = obj.nextPageThreshold;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nextPageThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onFinished(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICenterOnChild obj = (UICenterOnChild)o;
			SpringPanel.OnFinished ret = obj.onFinished;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onFinished on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCenter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICenterOnChild obj = (UICenterOnChild)o;
			UICenterOnChild.OnCenterCallback ret = obj.onCenter;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onCenter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_centeredObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICenterOnChild obj = (UICenterOnChild)o;
			UnityEngine.GameObject ret = obj.centeredObject;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index centeredObject on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_springStrength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICenterOnChild obj = (UICenterOnChild)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.springStrength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index springStrength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nextPageThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICenterOnChild obj = (UICenterOnChild)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.nextPageThreshold = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nextPageThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onFinished(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICenterOnChild obj = (UICenterOnChild)o;
			SpringPanel.OnFinished arg0 = (SpringPanel.OnFinished)ToLua.CheckDelegate<SpringPanel.OnFinished>(L, 2);
			obj.onFinished = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onFinished on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCenter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UICenterOnChild obj = (UICenterOnChild)o;
			UICenterOnChild.OnCenterCallback arg0 = (UICenterOnChild.OnCenterCallback)ToLua.CheckDelegate<UICenterOnChild.OnCenterCallback>(L, 2);
			obj.onCenter = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onCenter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UICenterOnChild_OnCenterCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<UICenterOnChild.OnCenterCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<UICenterOnChild.OnCenterCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

